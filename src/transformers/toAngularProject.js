import fs from 'fs';
import path from 'path';

import _ from 'lodash';

const template = component => `<h1 class="unmodified-component">${component.name}</h1>\n`;
const style = component => `${component.name} { }\n`;
const directive = component => `module.exports = () => ({
  restrict: 'E',
  template: require('./template.html'),
  controller: ['$scope', $scope => {

  }]
});`;

const moduleIndex = (function(module) {
  const moduleName = module.name;

  const onNewLineIfExists = value => value ? `\n${value}` : '';
  const printComponents = (indent, components) =>

`${(components || [])
      .map(
        ({name, path, components}) =>
            `${indent}.directive('${name}',${Array(Math.max(1, 33 - name.length - indent.length)).join(' ')}require('${path}'))${onNewLineIfExists(printComponents(indent + '  ', components))}`
      ).join('\n')
}`;

  const printFactories = (indent, factories) =>

`${(factories || [])
      .map(
        ({name, path, factories}) =>
            `${indent}.factory('${name}',${Array(Math.max(1, 33 - name.length - indent.length)).join(' ')}require('${path}'))${onNewLineIfExists(printFactories(indent + '  ', factories))}`
      ).join('\n')
}`;

  const printConfigs = (indent, configs) =>
`${
  (configs || []).map(config => `${indent}.config(require('./${config}'))`).join('\n')
}`;

  return ({name, requirements, components, factories, routes, configs}) => autoGenerated(
`require('angular');

${(requirements || []).map(({jsPackageName, moduleName}) => `require('${jsPackageName || moduleName}');`).join('\n')}

export default {
  '${name}': angular.module('${name}', [${(requirements || []).map(({moduleName}) => `'${moduleName}'`).join(', ')}])
${printComponents('    ', components)}
${printFactories('    ', factories)}
${printConfigs('    ', configs)}
};`);

})(module);

const createRoutes = routes => autoGenerated(
// autogenerateWarning`
// export default ...
// `
`export default ['$routeProvider', $routeProvider => {
  const routerController = [
    '$scope', '$routeParams',
    ($scope, $routeParams) => Object.assign($scope, $routeParams)
  ];

  // Allows you to wire a route to a specific item in a database.
  // Currently, this is equivalent to grabbing a value from a
  // key-value store based on a user provided parameter in the URL
  const dataController = [
    '$scope', '$routeParams', 'dataStore',
    ($scope, $routeParams, dataStore) => {
      const something = reduce($routeParams, (params, value, name) => {
        const [store, index] = name.match(/(\\b|[A-Z]+)[a-z]*/g);

        console.log({name, value, store, index});

        params[store] = dataStore[${'`get${capitalize(store)}By${index}`'}](value);

        return params;
      });

      console.log({$scope, dataStore, something});

      Object.assign($scope, something);

      function capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  ];

  $routeProvider
${routes.map(route =>
`      .when('${route.path}', {
      template: '<${route.name}></${route.name}>'
    })`).join('\n')}
    .otherwise({
      template: 'Where\\'d you come from?'
    });

  function reduce(list, fn, initial = {}) {
    let state = initial;
    for (let key in list) state = fn(state, list[key], key);
    return state;
  }
}];`);

const createConfigs = config =>
`export default [() => {

}];`;

const createApp = project => autoGenerated(`
import ${project.rootModule} from './modules/${project.rootModule}';

export default {
  '${project.rootModule}': ${project.rootModule}['${project.rootModule}']
};
`);

function autoGenerated(string) {
  return `/* !!!!!!! This file is autogenerated. DO NOT MODIFY !!!!!!! */
${string}
/* !!!!!!! This file is autogenerated. DO NOT MODIFY !!!!!!! */`;
}


export function toAngularProject(project) {
  const projectRoot = `${project.name}`,
        modulesRoot = path.join(projectRoot, 'modules');

  project.rootModule = getFirstModuleWithComponents(project);

  createDirectory(projectRoot);
  createDirectory(modulesRoot);

  project.modules.forEach(processModule);

  createFile(path.join(projectRoot, 'app.js'), createApp(project));
  createFile(path.join(projectRoot, 'app.less'), `body { }\n`);

  function getFirstModuleWithComponents(project) {
    for (let i = 0; i < project.modules.length; i++) {
      const module = project.modules[i];

      if (module.components && module.components.length > 0) return module.name;
    }
  }

  function processModule(module) {
    const moduleRoot = path.join(modulesRoot, module.name),
          directivesRoot = path.join(moduleRoot, 'directives'),
          factoriesRoot = path.join(moduleRoot, 'factories');

    createDirectory(moduleRoot);

    if (module.routes) {
      module.configs.unshift('routes'); // mutation
      processRoutes(module.routes);
    }

    if (module.components) processComponents(module.components);
    if (module.factories) processFactories(module.factories);
    if (module.configs) processConfigs(module.configs);

    createModuleIndex(module);

    function processRoutes(routes) {
      createFile(path.join(moduleRoot, 'routes.js'), createRoutes(routes));
    }

    function processComponents(components) {
      createDirectory(directivesRoot);

      components.forEach(componentProcessor(directivesRoot));

      function componentProcessor(root, parent = {path: `./directives`}) {
        return component => {
          component.path = `${parent.path}/${component.name}`; // mutation
          component.components.forEach(componentProcessor(prepareDirectory(component), component));
        };

        function prepareDirectory(component) {
          const componentRoot = path.join(root, component.name);

          createDirectory(componentRoot);
          createFiles(componentRoot, component);

          return componentRoot;
        }

        function createFiles(directory, component) {
          const root = path.join(directory, component.name);

          createFileIfNotExists(path.join(directory, 'template.html'), template(component));
          createFileIfNotExists(path.join(directory, 'style.less'), style(component));
          createFileIfNotExists(path.join(directory, 'index.js'), directive(component));
        }
      }
    }

    function processFactories(factories) {
      createDirectory(factoriesRoot);

      factories.forEach(factoryProcessor(factoriesRoot));

      function factoryProcessor(root, parent = {path: `./factories`}) {
        return factory => {
          factory.path = `${parent.path}/${factory.name}`; // mutation
          factory.factories.forEach(factoryProcessor(prepareDirectory(factory), factory));
        };

        function prepareDirectory(factory) {
          const factoryRoot = path.join(root, factory.name);

          createDirectory(factoryRoot);
          createFiles(factoryRoot, factory);

          return factoryRoot;
        }

        function createFiles(directory, factory) {
          const root = path.join(directory, factory.name);

          createFileIfNotExists(path.join(directory, 'index.js'), directive(factory));
        }
      }
    }

    function processConfigs(configs) {
      configs.forEach(config => createFileIfNotExists(path.join(moduleRoot, `${config}.js`), createConfigs(config)));
    }

    function createModuleIndex(module) {
      createFile(path.join(moduleRoot, 'index.js'), moduleIndex(module));
    }
  }
}

function createDirectory(directory) {
  if (!fs.existsSync(directory)) {
    console.log(`Creating D '${directory}'`);
    fs.mkdirSync(directory);
  }
}

function createFileIfNotExists(path, content) {
  if (!fs.existsSync(path)) createFile(path, content);
}

function createFile(path, content) {
  console.log(`Creating F '${path}'`);
  fs.writeFileSync(path, content);
}